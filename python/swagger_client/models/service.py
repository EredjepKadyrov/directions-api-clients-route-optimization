# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Service(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Service - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'type': 'str',
            'name': 'str',
            'address': 'Address',
            'duration': 'int',
            'time_windows': 'list[TimeWindow]',
            'size': 'list[int]',
            'required_skills': 'list[str]',
            'allowed_vehicles': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'name': 'name',
            'address': 'address',
            'duration': 'duration',
            'time_windows': 'time_windows',
            'size': 'size',
            'required_skills': 'required_skills',
            'allowed_vehicles': 'allowed_vehicles'
        }

        self._id = None
        self._type = None
        self._name = None
        self._address = None
        self._duration = None
        self._time_windows = None
        self._size = None
        self._required_skills = None
        self._allowed_vehicles = None

    @property
    def id(self):
        """
        Gets the id of this Service.
        Unique identifier of service

        :return: The id of this Service.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Service.
        Unique identifier of service

        :param id: The id of this Service.
        :type: str
        """
        self._id = id

    @property
    def type(self):
        """
        Gets the type of this Service.
        type of service

        :return: The type of this Service.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Service.
        type of service

        :param type: The type of this Service.
        :type: str
        """
        allowed_values = ["service", "pickup", "delivery"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def name(self):
        """
        Gets the name of this Service.
        name of service

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Service.
        name of service

        :param name: The name of this Service.
        :type: str
        """
        self._name = name

    @property
    def address(self):
        """
        Gets the address of this Service.


        :return: The address of this Service.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this Service.


        :param address: The address of this Service.
        :type: Address
        """
        self._address = address

    @property
    def duration(self):
        """
        Gets the duration of this Service.
        duration of service, i.e. time in ms the corresponding activity takes

        :return: The duration of this Service.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this Service.
        duration of service, i.e. time in ms the corresponding activity takes

        :param duration: The duration of this Service.
        :type: int
        """
        self._duration = duration

    @property
    def time_windows(self):
        """
        Gets the time_windows of this Service.
        array of time windows. currently, only a single time window is allowed

        :return: The time_windows of this Service.
        :rtype: list[TimeWindow]
        """
        return self._time_windows

    @time_windows.setter
    def time_windows(self, time_windows):
        """
        Sets the time_windows of this Service.
        array of time windows. currently, only a single time window is allowed

        :param time_windows: The time_windows of this Service.
        :type: list[TimeWindow]
        """
        self._time_windows = time_windows

    @property
    def size(self):
        """
        Gets the size of this Service.
        array of capacity dimensions

        :return: The size of this Service.
        :rtype: list[int]
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this Service.
        array of capacity dimensions

        :param size: The size of this Service.
        :type: list[int]
        """
        self._size = size

    @property
    def required_skills(self):
        """
        Gets the required_skills of this Service.
        array of required skills

        :return: The required_skills of this Service.
        :rtype: list[str]
        """
        return self._required_skills

    @required_skills.setter
    def required_skills(self, required_skills):
        """
        Sets the required_skills of this Service.
        array of required skills

        :param required_skills: The required_skills of this Service.
        :type: list[str]
        """
        self._required_skills = required_skills

    @property
    def allowed_vehicles(self):
        """
        Gets the allowed_vehicles of this Service.
        array of allowed vehicle ids

        :return: The allowed_vehicles of this Service.
        :rtype: list[str]
        """
        return self._allowed_vehicles

    @allowed_vehicles.setter
    def allowed_vehicles(self, allowed_vehicles):
        """
        Sets the allowed_vehicles of this Service.
        array of allowed vehicle ids

        :param allowed_vehicles: The allowed_vehicles of this Service.
        :type: list[str]
        """
        self._allowed_vehicles = allowed_vehicles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
