# coding: utf-8

"""
    Route Optimization API

    Our Route Optimization API solves the so called vehicle routing problem fast. It calculates an optimal tour for a set of vehicles, services and constraints

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Stop(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, address=None, duration=None, time_windows=None):
        """
        Stop - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'Address',
            'duration': 'int',
            'time_windows': 'list[TimeWindow]'
        }

        self.attribute_map = {
            'address': 'address',
            'duration': 'duration',
            'time_windows': 'time_windows'
        }

        self._address = address
        self._duration = duration
        self._time_windows = time_windows


    @property
    def address(self):
        """
        Gets the address of this Stop.


        :return: The address of this Stop.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this Stop.


        :param address: The address of this Stop.
        :type: Address
        """

        self._address = address

    @property
    def duration(self):
        """
        Gets the duration of this Stop.
        duration of stop, i.e. time in ms the corresponding activity takes

        :return: The duration of this Stop.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this Stop.
        duration of stop, i.e. time in ms the corresponding activity takes

        :param duration: The duration of this Stop.
        :type: int
        """

        self._duration = duration

    @property
    def time_windows(self):
        """
        Gets the time_windows of this Stop.
        array of time windows. currently, only a single time window is allowed

        :return: The time_windows of this Stop.
        :rtype: list[TimeWindow]
        """
        return self._time_windows

    @time_windows.setter
    def time_windows(self, time_windows):
        """
        Sets the time_windows of this Stop.
        array of time windows. currently, only a single time window is allowed

        :param time_windows: The time_windows of this Stop.
        :type: list[TimeWindow]
        """

        self._time_windows = time_windows

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
