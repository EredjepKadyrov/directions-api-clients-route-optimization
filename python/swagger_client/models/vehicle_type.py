# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class VehicleType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        VehicleType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type_id': 'str',
            'profile': 'str',
            'capacity': 'list[int]',
            'speed_factor': 'float',
            'service_time_factor': 'float'
        }

        self.attribute_map = {
            'type_id': 'type_id',
            'profile': 'profile',
            'capacity': 'capacity',
            'speed_factor': 'speed_factor',
            'service_time_factor': 'service_time_factor'
        }

        self._type_id = None
        self._profile = None
        self._capacity = None
        self._speed_factor = None
        self._service_time_factor = None

    @property
    def type_id(self):
        """
        Gets the type_id of this VehicleType.
        Unique identifier for the vehicle type

        :return: The type_id of this VehicleType.
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """
        Sets the type_id of this VehicleType.
        Unique identifier for the vehicle type

        :param type_id: The type_id of this VehicleType.
        :type: str
        """
        self._type_id = type_id

    @property
    def profile(self):
        """
        Gets the profile of this VehicleType.
        Profile of vehicle type

        :return: The profile of this VehicleType.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this VehicleType.
        Profile of vehicle type

        :param profile: The profile of this VehicleType.
        :type: str
        """
        allowed_values = ["car", "bike", "foot", "mtb", "motorcycle", "racingbike", "truck", "small_truck", "bus"]
        if profile not in allowed_values:
            raise ValueError(
                "Invalid value for `profile`, must be one of {0}"
                .format(allowed_values)
            )
        self._profile = profile

    @property
    def capacity(self):
        """
        Gets the capacity of this VehicleType.
        array of capacity dimensions

        :return: The capacity of this VehicleType.
        :rtype: list[int]
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """
        Sets the capacity of this VehicleType.
        array of capacity dimensions

        :param capacity: The capacity of this VehicleType.
        :type: list[int]
        """
        self._capacity = capacity

    @property
    def speed_factor(self):
        """
        Gets the speed_factor of this VehicleType.
        speed_factor of vehicle type

        :return: The speed_factor of this VehicleType.
        :rtype: float
        """
        return self._speed_factor

    @speed_factor.setter
    def speed_factor(self, speed_factor):
        """
        Sets the speed_factor of this VehicleType.
        speed_factor of vehicle type

        :param speed_factor: The speed_factor of this VehicleType.
        :type: float
        """
        self._speed_factor = speed_factor

    @property
    def service_time_factor(self):
        """
        Gets the service_time_factor of this VehicleType.
        service time factor of vehicle type

        :return: The service_time_factor of this VehicleType.
        :rtype: float
        """
        return self._service_time_factor

    @service_time_factor.setter
    def service_time_factor(self, service_time_factor):
        """
        Sets the service_time_factor of this VehicleType.
        service time factor of vehicle type

        :param service_time_factor: The service_time_factor of this VehicleType.
        :type: float
        """
        self._service_time_factor = service_time_factor

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
