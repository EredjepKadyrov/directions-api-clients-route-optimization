# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Request(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Request - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'vehicles': 'list[Vehicle]',
            'vehicle_types': 'list[VehicleType]',
            'services': 'list[Service]',
            'shipments': 'list[Shipment]',
            'relations': 'list[Relation]',
            'algorithm': 'Algorithm'
        }

        self.attribute_map = {
            'vehicles': 'vehicles',
            'vehicle_types': 'vehicle_types',
            'services': 'services',
            'shipments': 'shipments',
            'relations': 'relations',
            'algorithm': 'algorithm'
        }

        self._vehicles = None
        self._vehicle_types = None
        self._services = None
        self._shipments = None
        self._relations = None
        self._algorithm = None

    @property
    def vehicles(self):
        """
        Gets the vehicles of this Request.
        An array of vehicles that can be employed

        :return: The vehicles of this Request.
        :rtype: list[Vehicle]
        """
        return self._vehicles

    @vehicles.setter
    def vehicles(self, vehicles):
        """
        Sets the vehicles of this Request.
        An array of vehicles that can be employed

        :param vehicles: The vehicles of this Request.
        :type: list[Vehicle]
        """
        self._vehicles = vehicles

    @property
    def vehicle_types(self):
        """
        Gets the vehicle_types of this Request.
        An array of vehicle types

        :return: The vehicle_types of this Request.
        :rtype: list[VehicleType]
        """
        return self._vehicle_types

    @vehicle_types.setter
    def vehicle_types(self, vehicle_types):
        """
        Sets the vehicle_types of this Request.
        An array of vehicle types

        :param vehicle_types: The vehicle_types of this Request.
        :type: list[VehicleType]
        """
        self._vehicle_types = vehicle_types

    @property
    def services(self):
        """
        Gets the services of this Request.
        An array of services

        :return: The services of this Request.
        :rtype: list[Service]
        """
        return self._services

    @services.setter
    def services(self, services):
        """
        Sets the services of this Request.
        An array of services

        :param services: The services of this Request.
        :type: list[Service]
        """
        self._services = services

    @property
    def shipments(self):
        """
        Gets the shipments of this Request.
        An array of shipments

        :return: The shipments of this Request.
        :rtype: list[Shipment]
        """
        return self._shipments

    @shipments.setter
    def shipments(self, shipments):
        """
        Sets the shipments of this Request.
        An array of shipments

        :param shipments: The shipments of this Request.
        :type: list[Shipment]
        """
        self._shipments = shipments

    @property
    def relations(self):
        """
        Gets the relations of this Request.
        An array of relations

        :return: The relations of this Request.
        :rtype: list[Relation]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """
        Sets the relations of this Request.
        An array of relations

        :param relations: The relations of this Request.
        :type: list[Relation]
        """
        self._relations = relations

    @property
    def algorithm(self):
        """
        Gets the algorithm of this Request.


        :return: The algorithm of this Request.
        :rtype: Algorithm
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """
        Sets the algorithm of this Request.


        :param algorithm: The algorithm of this Request.
        :type: Algorithm
        """
        self._algorithm = algorithm

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
