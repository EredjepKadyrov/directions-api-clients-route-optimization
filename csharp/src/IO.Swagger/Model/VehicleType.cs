/* 
 * Route Optimization API
 *
 * Our Route Optimization API solves the so called vehicle routing problem fast. It calculates an optimal tour for a set of vehicles, services and constraints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VehicleType
    /// </summary>
    [DataContract]
    public partial class VehicleType :  IEquatable<VehicleType>
    {
        /// <summary>
        /// Profile of vehicle type
        /// </summary>
        /// <value>Profile of vehicle type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProfileEnum
        {
            
            /// <summary>
            /// Enum Car for "car"
            /// </summary>
            [EnumMember(Value = "car")]
            Car,
            
            /// <summary>
            /// Enum Bike for "bike"
            /// </summary>
            [EnumMember(Value = "bike")]
            Bike,
            
            /// <summary>
            /// Enum Foot for "foot"
            /// </summary>
            [EnumMember(Value = "foot")]
            Foot,
            
            /// <summary>
            /// Enum Mtb for "mtb"
            /// </summary>
            [EnumMember(Value = "mtb")]
            Mtb,
            
            /// <summary>
            /// Enum Motorcycle for "motorcycle"
            /// </summary>
            [EnumMember(Value = "motorcycle")]
            Motorcycle,
            
            /// <summary>
            /// Enum Racingbike for "racingbike"
            /// </summary>
            [EnumMember(Value = "racingbike")]
            Racingbike,
            
            /// <summary>
            /// Enum Truck for "truck"
            /// </summary>
            [EnumMember(Value = "truck")]
            Truck,
            
            /// <summary>
            /// Enum Smalltruck for "small_truck"
            /// </summary>
            [EnumMember(Value = "small_truck")]
            Smalltruck,
            
            /// <summary>
            /// Enum Bus for "bus"
            /// </summary>
            [EnumMember(Value = "bus")]
            Bus
        }

        /// <summary>
        /// Profile of vehicle type
        /// </summary>
        /// <value>Profile of vehicle type</value>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public ProfileEnum? Profile { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleType" /> class.
        /// </summary>
        /// <param name="TypeId">Unique identifier for the vehicle type.</param>
        /// <param name="Profile">Profile of vehicle type.</param>
        /// <param name="Capacity">array of capacity dimensions.</param>
        /// <param name="SpeedFactor">speed_factor of vehicle type.</param>
        /// <param name="ServiceTimeFactor">service time factor of vehicle type.</param>
        public VehicleType(string TypeId = null, ProfileEnum? Profile = null, List<int?> Capacity = null, double? SpeedFactor = null, double? ServiceTimeFactor = null)
        {
            this.TypeId = TypeId;
            this.Profile = Profile;
            this.Capacity = Capacity;
            this.SpeedFactor = SpeedFactor;
            this.ServiceTimeFactor = ServiceTimeFactor;
        }
        
        /// <summary>
        /// Unique identifier for the vehicle type
        /// </summary>
        /// <value>Unique identifier for the vehicle type</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public string TypeId { get; set; }
        /// <summary>
        /// array of capacity dimensions
        /// </summary>
        /// <value>array of capacity dimensions</value>
        [DataMember(Name="capacity", EmitDefaultValue=false)]
        public List<int?> Capacity { get; set; }
        /// <summary>
        /// speed_factor of vehicle type
        /// </summary>
        /// <value>speed_factor of vehicle type</value>
        [DataMember(Name="speed_factor", EmitDefaultValue=false)]
        public double? SpeedFactor { get; set; }
        /// <summary>
        /// service time factor of vehicle type
        /// </summary>
        /// <value>service time factor of vehicle type</value>
        [DataMember(Name="service_time_factor", EmitDefaultValue=false)]
        public double? ServiceTimeFactor { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VehicleType {\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  SpeedFactor: ").Append(SpeedFactor).Append("\n");
            sb.Append("  ServiceTimeFactor: ").Append(ServiceTimeFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VehicleType);
        }

        /// <summary>
        /// Returns true if VehicleType instances are equal
        /// </summary>
        /// <param name="other">Instance of VehicleType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleType other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TypeId == other.TypeId ||
                    this.TypeId != null &&
                    this.TypeId.Equals(other.TypeId)
                ) && 
                (
                    this.Profile == other.Profile ||
                    this.Profile != null &&
                    this.Profile.Equals(other.Profile)
                ) && 
                (
                    this.Capacity == other.Capacity ||
                    this.Capacity != null &&
                    this.Capacity.SequenceEqual(other.Capacity)
                ) && 
                (
                    this.SpeedFactor == other.SpeedFactor ||
                    this.SpeedFactor != null &&
                    this.SpeedFactor.Equals(other.SpeedFactor)
                ) && 
                (
                    this.ServiceTimeFactor == other.ServiceTimeFactor ||
                    this.ServiceTimeFactor != null &&
                    this.ServiceTimeFactor.Equals(other.ServiceTimeFactor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TypeId != null)
                    hash = hash * 59 + this.TypeId.GetHashCode();
                if (this.Profile != null)
                    hash = hash * 59 + this.Profile.GetHashCode();
                if (this.Capacity != null)
                    hash = hash * 59 + this.Capacity.GetHashCode();
                if (this.SpeedFactor != null)
                    hash = hash * 59 + this.SpeedFactor.GetHashCode();
                if (this.ServiceTimeFactor != null)
                    hash = hash * 59 + this.ServiceTimeFactor.GetHashCode();
                return hash;
            }
        }
    }

}
