/* 
 * Route Optimization API
 *
 * Our Route Optimization API solves the so called vehicle routing problem fast. It calculates an optimal tour for a set of vehicles, services and constraints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Service
    /// </summary>
    [DataContract]
    public partial class Service :  IEquatable<Service>, IValidatableObject
    {
        /// <summary>
        /// type of service
        /// </summary>
        /// <value>type of service</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Service for "service"
            /// </summary>
            [EnumMember(Value = "service")]
            Service,
            
            /// <summary>
            /// Enum Pickup for "pickup"
            /// </summary>
            [EnumMember(Value = "pickup")]
            Pickup,
            
            /// <summary>
            /// Enum Delivery for "delivery"
            /// </summary>
            [EnumMember(Value = "delivery")]
            Delivery
        }

        /// <summary>
        /// type of service
        /// </summary>
        /// <value>type of service</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Service" /> class.
        /// </summary>
        /// <param name="Id">Unique identifier of service.</param>
        /// <param name="Type">type of service.</param>
        /// <param name="Priority">priority of service, i.e. 1 &#x3D; high, 2 &#x3D; normal, 3 &#x3D; low. default is 2..</param>
        /// <param name="Name">name of service.</param>
        /// <param name="Address">Address.</param>
        /// <param name="Duration">duration of service, i.e. time in ms the corresponding activity takes.</param>
        /// <param name="TimeWindows">array of time windows. currently, only a single time window is allowed.</param>
        /// <param name="Size">array of capacity dimensions.</param>
        /// <param name="RequiredSkills">array of required skills.</param>
        /// <param name="AllowedVehicles">array of allowed vehicle ids.</param>
        public Service(string Id = null, TypeEnum? Type = null, int? Priority = null, string Name = null, Address Address = null, long? Duration = null, List<TimeWindow> TimeWindows = null, List<int?> Size = null, List<string> RequiredSkills = null, List<string> AllowedVehicles = null)
        {
            this.Id = Id;
            this.Type = Type;
            this.Priority = Priority;
            this.Name = Name;
            this.Address = Address;
            this.Duration = Duration;
            this.TimeWindows = TimeWindows;
            this.Size = Size;
            this.RequiredSkills = RequiredSkills;
            this.AllowedVehicles = AllowedVehicles;
        }
        
        /// <summary>
        /// Unique identifier of service
        /// </summary>
        /// <value>Unique identifier of service</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// priority of service, i.e. 1 &#x3D; high, 2 &#x3D; normal, 3 &#x3D; low. default is 2.
        /// </summary>
        /// <value>priority of service, i.e. 1 &#x3D; high, 2 &#x3D; normal, 3 &#x3D; low. default is 2.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }
        /// <summary>
        /// name of service
        /// </summary>
        /// <value>name of service</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }
        /// <summary>
        /// duration of service, i.e. time in ms the corresponding activity takes
        /// </summary>
        /// <value>duration of service, i.e. time in ms the corresponding activity takes</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public long? Duration { get; set; }
        /// <summary>
        /// array of time windows. currently, only a single time window is allowed
        /// </summary>
        /// <value>array of time windows. currently, only a single time window is allowed</value>
        [DataMember(Name="time_windows", EmitDefaultValue=false)]
        public List<TimeWindow> TimeWindows { get; set; }
        /// <summary>
        /// array of capacity dimensions
        /// </summary>
        /// <value>array of capacity dimensions</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public List<int?> Size { get; set; }
        /// <summary>
        /// array of required skills
        /// </summary>
        /// <value>array of required skills</value>
        [DataMember(Name="required_skills", EmitDefaultValue=false)]
        public List<string> RequiredSkills { get; set; }
        /// <summary>
        /// array of allowed vehicle ids
        /// </summary>
        /// <value>array of allowed vehicle ids</value>
        [DataMember(Name="allowed_vehicles", EmitDefaultValue=false)]
        public List<string> AllowedVehicles { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Service {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  TimeWindows: ").Append(TimeWindows).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  RequiredSkills: ").Append(RequiredSkills).Append("\n");
            sb.Append("  AllowedVehicles: ").Append(AllowedVehicles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Service);
        }

        /// <summary>
        /// Returns true if Service instances are equal
        /// </summary>
        /// <param name="other">Instance of Service to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Service other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Priority == other.Priority ||
                    this.Priority != null &&
                    this.Priority.Equals(other.Priority)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.TimeWindows == other.TimeWindows ||
                    this.TimeWindows != null &&
                    this.TimeWindows.SequenceEqual(other.TimeWindows)
                ) && 
                (
                    this.Size == other.Size ||
                    this.Size != null &&
                    this.Size.SequenceEqual(other.Size)
                ) && 
                (
                    this.RequiredSkills == other.RequiredSkills ||
                    this.RequiredSkills != null &&
                    this.RequiredSkills.SequenceEqual(other.RequiredSkills)
                ) && 
                (
                    this.AllowedVehicles == other.AllowedVehicles ||
                    this.AllowedVehicles != null &&
                    this.AllowedVehicles.SequenceEqual(other.AllowedVehicles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Priority != null)
                    hash = hash * 59 + this.Priority.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                if (this.TimeWindows != null)
                    hash = hash * 59 + this.TimeWindows.GetHashCode();
                if (this.Size != null)
                    hash = hash * 59 + this.Size.GetHashCode();
                if (this.RequiredSkills != null)
                    hash = hash * 59 + this.RequiredSkills.GetHashCode();
                if (this.AllowedVehicles != null)
                    hash = hash * 59 + this.AllowedVehicles.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
