/**
 * Route Optimization API
 * Our Route Optimization API solves the so called vehicle routing problem fast. It calculates an optimal tour for a set of vehicles, services and constraints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGActivity.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGActivity::SWGActivity(QString* json) {
    init();
    this->fromJson(*json);
}

SWGActivity::SWGActivity() {
    init();
}

SWGActivity::~SWGActivity() {
    this->cleanup();
}

void
SWGActivity::init() {
    type = new QString("");
id = new QString("");
location_id = new QString("");
arr_time = 0L;
end_time = 0L;
waiting_time = 0L;
distance = 0L;
driving_time = 0L;
load_before = new QList<qint32>();
load_after = new QList<qint32>();
}

void
SWGActivity::cleanup() {
    if(type != NULL) {
        delete type;
    }
if(id != NULL) {
        delete id;
    }
if(location_id != NULL) {
        delete location_id;
    }







}

SWGActivity*
SWGActivity::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGActivity::fromJsonObject(QJsonObject &pJson) {
    setValue(&type, pJson["type"], "QString", "QString");
setValue(&id, pJson["id"], "QString", "QString");
setValue(&location_id, pJson["location_id"], "QString", "QString");
setValue(&arr_time, pJson["arr_time"], "qint64", "");
setValue(&end_time, pJson["end_time"], "qint64", "");
setValue(&waiting_time, pJson["waiting_time"], "qint64", "");
setValue(&distance, pJson["distance"], "qint64", "");
setValue(&driving_time, pJson["driving_time"], "qint64", "");
setValue(&load_before, pJson["load_before"], "QList", "");
setValue(&load_after, pJson["load_after"], "QList", "");
}

QString
SWGActivity::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGActivity::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("type"), type, obj, QString("QString"));
    
        

    
    toJsonValue(QString("id"), id, obj, QString("QString"));
    
        

    
    toJsonValue(QString("location_id"), location_id, obj, QString("QString"));
    
        
obj->insert("arr_time", QJsonValue(arr_time));
obj->insert("end_time", QJsonValue(end_time));
obj->insert("waiting_time", QJsonValue(waiting_time));
obj->insert("distance", QJsonValue(distance));
obj->insert("driving_time", QJsonValue(driving_time));
obj->insert("load_before", QJsonValue(load_before));
obj->insert("load_after", QJsonValue(load_after));

    return obj;
}

QString*
SWGActivity::getType() {
    return type;
}
void
SWGActivity::setType(QString* type) {
    this->type = type;
}

QString*
SWGActivity::getId() {
    return id;
}
void
SWGActivity::setId(QString* id) {
    this->id = id;
}

QString*
SWGActivity::getLocationId() {
    return location_id;
}
void
SWGActivity::setLocationId(QString* location_id) {
    this->location_id = location_id;
}

qint64
SWGActivity::getArrTime() {
    return arr_time;
}
void
SWGActivity::setArrTime(qint64 arr_time) {
    this->arr_time = arr_time;
}

qint64
SWGActivity::getEndTime() {
    return end_time;
}
void
SWGActivity::setEndTime(qint64 end_time) {
    this->end_time = end_time;
}

qint64
SWGActivity::getWaitingTime() {
    return waiting_time;
}
void
SWGActivity::setWaitingTime(qint64 waiting_time) {
    this->waiting_time = waiting_time;
}

qint64
SWGActivity::getDistance() {
    return distance;
}
void
SWGActivity::setDistance(qint64 distance) {
    this->distance = distance;
}

qint64
SWGActivity::getDrivingTime() {
    return driving_time;
}
void
SWGActivity::setDrivingTime(qint64 driving_time) {
    this->driving_time = driving_time;
}

QList<qint32>*
SWGActivity::getLoadBefore() {
    return load_before;
}
void
SWGActivity::setLoadBefore(QList<qint32>* load_before) {
    this->load_before = load_before;
}

QList<qint32>*
SWGActivity::getLoadAfter() {
    return load_after;
}
void
SWGActivity::setLoadAfter(QList<qint32>* load_after) {
    this->load_after = load_after;
}



} /* namespace Swagger */

