package WWW::SwaggerClient::Object::Vehicle;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base "WWW::SwaggerClient::Object::BaseObject";

#
#
#
#NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
#

my $swagger_types = {
    'vehicle_id' => 'string',
    'type_id' => 'string',
    'start_address' => 'Address',
    'end_address' => 'Address',
    'break' => 'Break',
    'return_to_depot' => 'boolean',
    'earliest_start' => 'int',
    'latest_end' => 'int',
    'skills' => 'ARRAY[string]'
};

my $attribute_map = {
    'vehicle_id' => 'vehicle_id',
    'type_id' => 'type_id',
    'start_address' => 'start_address',
    'end_address' => 'end_address',
    'break' => 'break',
    'return_to_depot' => 'return_to_depot',
    'earliest_start' => 'earliest_start',
    'latest_end' => 'latest_end',
    'skills' => 'skills'
};

# new object
sub new { 
    my ($class, %args) = @_; 
    my $self = { 
        #Unique identifier of vehicle
        'vehicle_id' => $args{'vehicle_id'}, 
        #Unique identifier referring to the available vehicle types
        'type_id' => $args{'type_id'}, 
        #
        'start_address' => $args{'start_address'}, 
        #
        'end_address' => $args{'end_address'}, 
        #
        'break' => $args{'break'}, 
        #Indicates whether vehicle should return to start address or not. If not, it can end at any service activity.
        'return_to_depot' => $args{'return_to_depot'}, 
        #earliest start of vehicle at its start location
        'earliest_start' => $args{'earliest_start'}, 
        #latest end of vehicle at its end location
        'latest_end' => $args{'latest_end'}, 
        #array of skills
        'skills' => $args{'skills'}
    }; 

    return bless $self, $class; 
}  

# get swagger type of the attribute
sub get_swagger_types {
    return $swagger_types;
}

# get attribute mappping
sub get_attribute_map {
    return $attribute_map;
}

1;
